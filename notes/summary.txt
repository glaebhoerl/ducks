=== BIG PICTURE ===

 * Fully structural type system
 * All name resolution is just record field access
 * Types first-class
 * Abstraction, data, control
 * Pure and strict, but better support for laziness than OCaml, and better support for mutation than Haskell

=== BIGGER PICTURE ===

 * First-class records and variants (structs/enums, w/e) with duplicate labels (a la Leijen)
   (Actual structure is like record-of-tuples)
 * First-class functions with effect types and effect polymorphism
   Minimal distinction: pure vs impure
   Probably wired in: io (globally observable mutation), mut (local mutation), atomic (STM)
 * Functions take single record as arguments => named parameters everywhere (with same internal+external name)
 * No separate name resolution pass: it's records all the way down!
 * Row polymorphism
 * Equirecursive types
 * Value- and type-level unified like in 1ML
   `forall` is just a function with a type argument, `exists` is just a record with a type component
   `forall` is _always_ a function! No value restriction!
 * Impredicativity
 * Uppercase vs. lowercase
 * "Parameterization over fibration"
   `type Monoid(T) = (mempty: T, mappend: fn(T, T) -> T)` and `Monoid(Int)`
   instead of: `type Monoid = (type T, mempty: T, mappend: fn(T, T) -> T)` and `Monoid where type T = Int`
   in general, avoid having `=` signs at the type level
 * Expressions infer as values (effects "escape" into the outer scope), also check as closures (effects captured)
 * Nullary pure functions are memoized -> "call-by-need"
 * Effect-typed data for mutability polymorphism
 * C/JavaScript-style syntax for familiarity/accessibility (also somewhat Rust-inspired)
 * Built-in types `UInt`, `Int`, `Float`: all arbitrary precision!
 * Runtime representation using "intensional type analysis" instead of boxing
   ByteString is just Array(Byte)!

=== THINGS TO AVOID ===

 * duplication
 * dependent types
 * subtyping
 * macros
 * data races
 * rabbit holes

=== UNRESOLVED ===

 * Coroutines, fibers, yield/run, scoped/delimited continuations, algebraic effects, ... ???
 * Type inference
 * Effect typing details (effect rows? user-defined effects?)
 * Ad-hoc polymorphism
 * Data-generic stuff
 * Threading/concurrency model
 * Pattern matching, first-class patterns / pattern synonyms, ...
 * Memory management strategy (GC and/or RC and/or region inference)

=== STATUS ===

BLOCKERS
  1. Uppercase vs. lowercase [Look at 1ML again, at least!]
  2. Delimited continuations vs. effects vs. etc [FALLBACK: leave them out at first]
  3. Type inference [FALLBACK: bidirectional at first?]
  4. Ad-hoc polymorphism [FALLBACK: leave it out at first]

TOREAD:
  1ML
  MLF, BiDi
  First-class labels
  "System FÏ‰ with Equirecursive Types for Datatype-generic Programming"
  LMS?
  Prolog, Datalog? (Curry?)

Other languages:
  Shen? "The way Shen's pattern-matching, functions, reader macros, Prolog, type system and compiler-compiler all work together is a thing of beauty."
  http://mythryl.org/
  Dylan? Elixir? Mezzo?

Implement an existing language first to get experience?
  STLC, System F, System Fomega...
  Haskell 98, Standard ML, 1ML?
  Is there anything in between the two in complexity?

=== Important papers ===

1ML: Core and modules united (F-ing first class modules)
Extensible records with scoped labels
Out of the Tar Pit
Abstraction without regret in database systems building - a manifesto
-

